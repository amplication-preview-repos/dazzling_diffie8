/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Rekomendasi } from "./Rekomendasi";
import { RekomendasiCountArgs } from "./RekomendasiCountArgs";
import { RekomendasiFindManyArgs } from "./RekomendasiFindManyArgs";
import { RekomendasiFindUniqueArgs } from "./RekomendasiFindUniqueArgs";
import { CreateRekomendasiArgs } from "./CreateRekomendasiArgs";
import { UpdateRekomendasiArgs } from "./UpdateRekomendasiArgs";
import { DeleteRekomendasiArgs } from "./DeleteRekomendasiArgs";
import { Temuan } from "../../temuan/base/Temuan";
import { RekomendasiService } from "../rekomendasi.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Rekomendasi)
export class RekomendasiResolverBase {
  constructor(
    protected readonly service: RekomendasiService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Rekomendasi",
    action: "read",
    possession: "any",
  })
  async _rekomendasisMeta(
    @graphql.Args() args: RekomendasiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Rekomendasi])
  @nestAccessControl.UseRoles({
    resource: "Rekomendasi",
    action: "read",
    possession: "any",
  })
  async rekomendasis(
    @graphql.Args() args: RekomendasiFindManyArgs
  ): Promise<Rekomendasi[]> {
    return this.service.rekomendasis(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Rekomendasi, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Rekomendasi",
    action: "read",
    possession: "own",
  })
  async rekomendasi(
    @graphql.Args() args: RekomendasiFindUniqueArgs
  ): Promise<Rekomendasi | null> {
    const result = await this.service.rekomendasi(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Rekomendasi)
  @nestAccessControl.UseRoles({
    resource: "Rekomendasi",
    action: "create",
    possession: "any",
  })
  async createRekomendasi(
    @graphql.Args() args: CreateRekomendasiArgs
  ): Promise<Rekomendasi> {
    return await this.service.createRekomendasi({
      ...args,
      data: {
        ...args.data,

        temuan: args.data.temuan
          ? {
              connect: args.data.temuan,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Rekomendasi)
  @nestAccessControl.UseRoles({
    resource: "Rekomendasi",
    action: "update",
    possession: "any",
  })
  async updateRekomendasi(
    @graphql.Args() args: UpdateRekomendasiArgs
  ): Promise<Rekomendasi | null> {
    try {
      return await this.service.updateRekomendasi({
        ...args,
        data: {
          ...args.data,

          temuan: args.data.temuan
            ? {
                connect: args.data.temuan,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rekomendasi)
  @nestAccessControl.UseRoles({
    resource: "Rekomendasi",
    action: "delete",
    possession: "any",
  })
  async deleteRekomendasi(
    @graphql.Args() args: DeleteRekomendasiArgs
  ): Promise<Rekomendasi | null> {
    try {
      return await this.service.deleteRekomendasi(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Temuan, {
    nullable: true,
    name: "temuan",
  })
  @nestAccessControl.UseRoles({
    resource: "Temuan",
    action: "read",
    possession: "any",
  })
  async getTemuan(
    @graphql.Parent() parent: Rekomendasi
  ): Promise<Temuan | null> {
    const result = await this.service.getTemuan(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
