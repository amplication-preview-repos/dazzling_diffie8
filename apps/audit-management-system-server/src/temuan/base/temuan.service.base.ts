/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Temuan as PrismaTemuan,
  Rekomendasi as PrismaRekomendasi,
} from "@prisma/client";

export class TemuanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TemuanCountArgs, "select">): Promise<number> {
    return this.prisma.temuan.count(args);
  }

  async temuans(args: Prisma.TemuanFindManyArgs): Promise<PrismaTemuan[]> {
    return this.prisma.temuan.findMany(args);
  }
  async temuan(
    args: Prisma.TemuanFindUniqueArgs
  ): Promise<PrismaTemuan | null> {
    return this.prisma.temuan.findUnique(args);
  }
  async createTemuan(args: Prisma.TemuanCreateArgs): Promise<PrismaTemuan> {
    return this.prisma.temuan.create(args);
  }
  async updateTemuan(args: Prisma.TemuanUpdateArgs): Promise<PrismaTemuan> {
    return this.prisma.temuan.update(args);
  }
  async deleteTemuan(args: Prisma.TemuanDeleteArgs): Promise<PrismaTemuan> {
    return this.prisma.temuan.delete(args);
  }

  async findRekomendasis(
    parentId: string,
    args: Prisma.RekomendasiFindManyArgs
  ): Promise<PrismaRekomendasi[]> {
    return this.prisma.temuan
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rekomendasis(args);
  }
}
